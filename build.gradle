buildscript {
    ext {
        springBootVersion = '2.4.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.13")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'info.solidsoft.pitest' version '1.5.1'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '7.1.1'
    id 'org.owasp.dependencycheck' version '6.0.2'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.4.2'
    id 'au.com.dius.pact' version '4.1.11'
}

def versions = [
        awaitility                   : '4.0.2',
        bcpkixJdk15on                : '1.64',
        bspCommonLib                 : '0.0.47',
        ccdStoreClient               : '4.7.3',
        commonsBeanUtils             : '1.9.4',
        commonsIo                    : '2.6',
        commonsLang3                 : '3.9',
        commonsMath3                 : '3.6.1',
        divCommonLib                 : '2.0.0',
        dumbster                     : '1.7.1',
        elasticsearch                : '7.10.2',
        feignHttpClient              : '10.3.0',
        flyway                       : '6.5.5',
        googleAuth                   : '1.5.0',
        gradlePitest                 : '1.4.6',
        guava                        : '30.1-jre',
        hibernateTypes               : '2.4.4',
        hmctsNotify                  : '3.14.1-RELEASE',
        idamClient                   : '2.0.0',
        jackson                      : '2.11.1',
        jacksonDatatypeJsr           : '2.10.0',
        jakartaMail                  : '1.6.5',
        jakartaWsRs                  : '2.1.6',
        javaMail                     : '1.6.2',
        jdbi                         : '2.78',
        jsonAssert                   : '1.2.3',
        jsonPathAssert               : '2.2.0',
        lombok                       : '1.18.12',
        pitest                       : '1.4.10',
        postgresql                   : '42.2.13',
        puppyCrawl                   : '8.29',
        reformsJavaLogging           : '5.1.7',
        sendLetterClient             : '2.2.0',
        serenity                     : '2.2.13',
        serenityCucumber             : '1.9.50',
        serviceTokenGenerator        : '4.0.0',
        sonarPitest                  : '0.5',
        springfoxSwagger             : '3.0.0',
        springSecurityCrypto         : '5.2.4.RELEASE',
        springSecurityRsa            : '1.0.8.RELEASE',
        springCloud                  : '3.0.1',
        feignHttpClient              : '10.2.0',
        unirest                      : '1.4.9',
        embeddedPostgres             : '1.5.5',
        pact_version                 : '4.1.11',
        httpComponents               : '4.5.13',
]

allprojects {

    def springBootVersion = '2.4.2'

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'org.owasp.dependencycheck'

    group = 'uk.gov.hmcts.reform.divorce'
    version = '0.0.1'

    checkstyle.toolVersion = '8.34'
    checkstyle.configFile = new File(rootDir, "checkstyle.xml")
    checkstyle.configDir(rootDir)
    checkstyle.maxWarnings(0)

    // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
    dependencyCheck {
        // Specifies if the build should be failed if a CVSS score above a specified level is identified.
        // range of 0-10 fails the build, anything greater and it doesn't fail the build
        failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
        suppressionFile = 'dependency-check-suppressions.xml'
        analyzers {
            // Disable scanning of .NET related binaries
            assemblyEnabled = false
        }
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
        maven { url 'https://repo.spring.io/libs-milestone' }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
        dependencies {
            dependencySet(
                    group: 'com.fasterxml.jackson.core',
                    version: versions.jackson
            ) {
                entry 'jackson-core'
                entry 'jackson-databind'
            }
            dependencySet(
                    group: 'com.fasterxml.jackson.datatype',
                    version: versions.jackson
            ) {
                entry 'jackson-datatype-jdk8'
                entry 'jackson-datatype-jsr310'
            }
            dependencySet(
                    group: 'com.fasterxml.jackson.module',
                    version: versions.jackson
            ) {
                entry 'jackson-module-parameter-names'
            }

            // CVE-2019-10086
            dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'
            //CVE-2020-25638
            dependencySet(group: 'org.hibernate', version: '5.4.25.Final') {
                entry 'hibernate-core'
            }
            //CVE-2017-18640
            dependency group: 'org.yaml',name: 'snakeyaml', version: '1.26'
        }
    }
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '0.0.1'
sourceCompatibility = 11

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }

    archiveFileName = 'nfdiv-case-orchestration-service.jar'
}

mainClassName = 'uk.gov.hmcts.reform.divorce.orchestration.OrchestrationServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/functionalTest/java')
        }
        resources {
            srcDir('src/functionalTest/resources')
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

dependencies {
    implementation project(':job-scheduler')

    compileOnly("org.projectlombok:lombok:${versions.lombok}")
    testCompileOnly("org.projectlombok:lombok:${versions.lombok}")
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    integrationTestAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")

    implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert
    implementation group: 'com.github.kirviq', name: 'dumbster', version: versions.dumbster
    implementation group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-52', version: versions.hibernateTypes
    implementation group: 'com.sun.mail', name: 'javax.mail', version: versions.javaMail
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: '1.2.2'
    implementation group: 'jakarta.mail', name: 'jakarta.mail-api', version: versions.jakartaMail
    implementation group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: versions.jakartaWsRs
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.apache.commons', name: 'commons-math3', version: versions.commonsMath3
    implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    implementation group: 'org.elasticsearch', name: 'elasticsearch', version: versions.elasticsearch
    implementation group: 'org.elasticsearch.client', name: 'transport', version: versions.elasticsearch
    implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
    implementation group: 'org.jdbi', name: 'jdbi', version: versions.jdbi
    implementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
    implementation group: 'org.springframework', name: 'spring-context-support'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
    implementation group: 'org.springframework.retry', name: 'spring-retry'
    implementation group: 'uk.gov.hmcts.reform', name: 'bsp-common-lib', version: versions.bspCommonLib
    implementation group: 'uk.gov.hmcts.reform', name: 'nfdiv-common-lib', version: versions.divCommonLib
    implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: versions.idamClient
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator
    implementation group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: versions.sendLetterClient
    implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.25.Final'

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloud)

    implementation(group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils) {
        force = true
    }

    implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson) {
        force = true
    }

    implementation(group: 'com.google.guava', name: 'guava', version: versions.guava)

    implementation(group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: versions.bcpkixJdk15on) {
        force = true
    }

    implementation(group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.springSecurityRsa) {
        force = true
    }

    implementation(group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }


    implementation(group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)

    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation group: 'org.awaitility', name: 'awaitility', version: versions.awaitility
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloud
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
        exclude(module: 'android-json')
    }
    testImplementation group: 'io.zonky.test', name: 'embedded-database-spring-test', version: versions.embeddedPostgres

    //functional test
    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestImplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jacksonDatatypeJsr
    functionalTestImplementation group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    functionalTestImplementation group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    functionalTestImplementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    functionalTestImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestImplementation group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    functionalTestImplementation group: 'org.springframework', name: 'spring-context-support'
    functionalTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    functionalTestImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: versions.springCloud)
    functionalTestImplementation(group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)
    functionalTestImplementation(group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator)

    contractTestCompile group: 'com.google.guava', name: 'guava', version: versions.guava
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestCompile group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version
    contractTestRuntime group: 'com.google.guava', name: 'guava', version: versions.guava
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
    contractTestRuntime group: 'au.com.dius.pact.consumer', name: 'java8', version: versions.pact_version

    contractTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: versions.httpComponents
    contractTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.7.0")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

dependencies {
    functionalTestImplementation(sourceSets.test.output)
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.orchestration.category.SmokeTest'
    }
}

ext.getVaultSecret = { String secretName ->
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'nfdiv-aat', '-o', 'tsv', '--query', 'value', '--name', secretName
            standardOutput = os
        }
        return os.toString().replace('\n', '')
    }
}

bootRun {
    doFirst() {
        if (System.getenv("IDAM_API_BASEURL") == null) {
            println("Loading secrets from vault")

            systemProperty 'IDAM_API_URL', 'https://idam-api.aat.platform.hmcts.net'
            systemProperty 'IDAM_API_REDIRECT_URL', 'https://div-pfe-aat.service.core-compute-aat.internal/authenticated'
            systemProperty 'SERVICE_AUTH_PROVIDER_URL', 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
            systemProperty 'CASE_MAINTENANCE_SERVICE_API_BASEURL', 'http://nfdiv-cms-aat.service.core-compute-aat.internal'
            systemProperty 'SEND_LETTER_SERVICE_BASEURL', 'http://rpe-send-letter-service-aat.service.core-compute-aat.internal'
            systemProperty 'PAYMENT_API_BASEURL', 'http://payment-api-aat.service.core-compute-aat.internal'
            systemProperty 'PRD_API_BASEURL', 'http://rd-professional-api-aat.service.core-compute-aat.internal'
            systemProperty 'DOCUMENT_GENERATOR_SERVICE_API_BASEURL', 'http://div-dgs-aat.service.core-compute-aat.internal'
            systemProperty 'FEES_AND_PAYMENTS_SERVICE_API_BASEURL', 'http://div-fps-aat.service.core-compute-aat.internal'
            systemProperty 'DOCUMENT_MANAGEMENT_STORE_URL', 'http://dm-store-aat.service.core-compute-aat.internal'
            systemProperty 'ACA_SERVICE_API_BASEURL', 'http://aac-manage-case-assignment-aat.service.core-compute-aat.internal'
            systemProperty 'CCD_DATA_STORE_API_BASEURL', 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'

            systemProperty 'nfdiv.cos-service-key', getVaultSecret('cos-service-key')
            systemProperty 'nfdiv.idam-secret', getVaultSecret('idam-secret')
            systemProperty 'nfdiv.idam-citizen-username', getVaultSecret('idam-citizen-username')
            systemProperty 'nfdiv.idam-citizen-password', getVaultSecret('idam-citizen-password')
            systemProperty 'nfdiv.idam-caseworker-username', getVaultSecret('idam-caseworker-username')
            systemProperty 'nfdiv.idam-caseworker-password', getVaultSecret('idam-caseworker-password')
            systemProperty 'nfdiv.cos-postgresql-password', getVaultSecret('cos-postgresql-password')
            systemProperty 'nfdiv.uk-gov-notify-api-key', getVaultSecret('uk-gov-notify-api-key')

            systemProperty "user.timezone", "UTC"
        }
    }
}

task functional(type: Test, description: 'Runs the integration tests', group: 'Verification') {
    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task nightlyFunctional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    doFirst(){
        if (System.getenv("TEST_URL") == null) {
            println("Loading secrets from vault")

            systemProperty 'AUTH_PROVIDER_CCDSUBMISSION_CLIENT_KEY', getVaultSecret('cms-service-key')
            systemProperty 'AUTH_PROVIDER_DOCUMENTGENERATOR_CLIENT_KEY', getVaultSecret('div-doc-s2s-auth-secret')
            systemProperty 'IDAM_CLIENT_SECRET', getVaultSecret('idam-secret')
            //systemProperty 'IDAM_API_BASEURL', 'http://localhost:5000'
            //systemProperty 'CASE_MAINTENANCE_SERVICE_API_BASEURL', 'http://localhost:4010'
            //systemProperty 'CASE_DATA_STORE_BASEURL', 'http://localhost:4452'
            //systemProperty 'PAYMENT_API_BASEURL', 'http://localhost:8383'
         }
        printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10

    exclude "uk/gov/hmcts/reform/divorce/callback/nightly/pipeline/**"
    exclude "uk/gov/hmcts/reform/divorce/maintenance/nightly/pipeline/**"

    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)

    if (System.getenv('CHANGE_TITLE')?.startsWith('[FAST]')) {
        useJUnit {
            excludeCategories 'uk.gov.hmcts.reform.divorce.category.ExtendedTest'
        }
    }
    finalizedBy aggregate
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.orchestration.*']
    excludedClasses = ['uk.gov.hmcts.reform.divorce.orchestration.config.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.domain.model.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.exception.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.client.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.management.config.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.framework.workflow.task.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
        '**uk/gov/hmcts/reform/divorce/orchestration/domain/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/**/config/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/OrchestrationServiceApplication.java',
        '**uk/gov/hmcts/reform/divorce/orchestration/client/**',
        '**uk/gov/hmcts/reform/divorce/orchestration/event/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/service/bulk/scan/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/controller/BulkScanController.java',
        '**uk/gov/hmcts/reform/divorce/orchestration/framework/workflow/task/DefaultTaskContext.java',
        '**uk/gov/hmcts/reform/divorce/scheduler/model/*',
        '**uk/gov/hmcts/reform/divorce/scheduler/config/**/*'
]

sonarqube {
    properties {
        property "sonar.projectName", "Divorce :: nfdiv-case-orchestration-service"
        property "sonar.projectKey", "nfdiv-case-orchestration-service"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

flyway {
    url = System.getenv('FLYWAY_URL')
    user = System.getenv('DIV_SCHEDULER_DB_USER_NAME')
    password = System.getenv('DIV_SCHEDULER_DB_PASSWORD')
    baselineOnMigrate = true
    baselineVersion = '000'
    schemas = 'public'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/divorce/orchestration/client/**"
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task runAndPublishConsumerPactTests(type: Test){
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.dependsOn contract

runAndPublishConsumerPactTests.finalizedBy pactPublish

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
        version = project.pactVersion
    }
}